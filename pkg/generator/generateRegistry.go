//go:build ignore

package main

import (
	"bytes"
	"go/format"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/rs/zerolog/log"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

func main() {

	cwd, err := os.Getwd()
	typesDir := cwd + "/../types"

	if err != nil {
		panic(err)
	}

	var fmap = map[string]interface{}{
		"camel": ToCamelCase,
	}

	tpl := `// Autogenerated code. DO NOT EDIT.
		package {{.Package}}

		{{range .TypesList}}
		var {{.}} {{camel .}}
		{{end}} 
        //gocyclo:ignore
		func GetType(templateType string) interface{} {

			switch templateType {
			{{range .TypesList}}
       			case "{{.}}":
				return &{{.}}
    		{{end}}}
			return nil
		}`

	var typesList []string
	err = filepath.Walk(typesDir, func(path string, info os.FileInfo, err error) error {
		if !info.IsDir() && isAGoFile(path) && !isAGeneratedFile(path) {
			name := strings.Split(filepath.Base(path), ".")

			if !(strings.HasPrefix(name[0], "array_") || strings.HasPrefix(name[0], "map_")) {
				typesList = append(typesList, name[0])
			} else {
				//The naming convention for generated code for Array in gogen-avro is: Array<filename>Wrapper we use Array_<filename>_Wrapper because we use {{camel .}} later in the template
				typesList = append(typesList, name[0]+"_wrapper")
			}

		}
		return nil
	})

	if err != nil {
		panic(err)
	}

	type data struct {
		Package   string
		TypesList []string
	}

	d := &data{
		//Package:   os.Getenv("GOPACKAGE"),
		Package:   "types",
		TypesList: typesList,
	}

	t := template.Must(template.New("registry").Funcs(fmap).Parse(tpl))
	var b bytes.Buffer
	err = t.Execute(&b, d)
	if err != nil {
		log.Fatal().Err(err).Msg("Error executing template")
	}

	bb, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal().Err(err).Msg("Error formatting source")
	}

	initFile, err := os.OpenFile("../types/registry.go", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		log.Fatal().Err(err).Msg("Error opening file")
	}
	defer initFile.Close()

	_, err = initFile.WriteString(string(bb))
	if err != nil {
		log.Fatal().Err(err).Msg("Error writing to init file")
	}

}

func isAGoFile(path string) bool {
	return strings.HasSuffix(path, "go")
}

func isAGeneratedFile(path string) bool {
	return strings.HasSuffix(path, "generateRegistry.go") || strings.HasSuffix(path, "registry.go") || strings.HasSuffix(path, "generate.go")
}

func ToCamelCase(s string) string {
	parts := strings.Split(s, "_")
	for i := range parts {
		parts[i] = cases.Title(language.English).String(parts[i])
	}
	return strings.Join(parts, "")
}
